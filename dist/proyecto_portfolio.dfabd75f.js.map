{"version":3,"sources":["index.js"],"names":["name","animalMap","options","includeNames","data","animals","reduce","arr","animal","obj","residents","map","item","some","location","forEach","push","val","console","log"],"mappings":";AACA,IAAMA,EAAO,QAGb,SAASC,EAAUC,GAEb,OAACA,EAwBMA,EAAQC,aAGDC,KAAKC,QAAQC,OAAO,SAACC,EAAKC,GAEpCC,IAAAA,EAAM,GAYHF,OAXLE,EAAID,EAAOR,MAAQQ,EAAOE,UAAUC,IAAI,SAAAC,GAAQA,OAAAA,EAAKZ,OACpDO,EAAIM,KAAK,SAAAD,GAAQA,OAAAA,EAAK,KAAOJ,EAAOM,WACrCP,EAAIQ,QAAQ,SAAAH,GACPA,EAAK,KAAOJ,EAAOM,UACpBF,EAAK,GAAGI,KAAKP,KAIjBF,EAAIS,KAAK,CAACR,EAAOM,SAAU,CAACL,KAGvBF,GACP,IACaD,OAAO,SAACG,EAAKQ,GAEnBR,OADPA,EAAIQ,EAAI,IAAMA,EAAI,GACXR,GACP,SAtBG,EAlBWL,KAAKC,QAAQC,OAAO,SAACC,EAAKC,GAWjCD,OAVJA,EAAIM,KAAK,SAAAD,GAAQA,OAAAA,EAAK,KAAOJ,EAAOM,WACrCP,EAAIQ,QAAQ,SAAAH,GACPA,EAAK,KAAOJ,EAAOM,UACpBF,EAAK,GAAGI,KAAKR,EAAOR,QAIxBO,EAAIS,KAAK,CAACR,EAAOM,SAAU,CAACN,EAAOR,QAG9BO,GACP,IACaD,OAAO,SAACG,EAAKQ,GAEnBR,OADPA,EAAIQ,EAAI,IAAMA,EAAI,GACXR,GACP,IA1BNS,QAAQC,IAAanB,SAAAA,OAAAA","file":"proyecto_portfolio.dfabd75f.js","sourceRoot":"..","sourcesContent":["\nconst name = 'world';\nconsole.log(`Hello ${name}`);\n\nfunction animalMap(options) {\n  // with no parameters\n  if (!options) {\n  //Using reduce method, create a matrix with arrays of two values:\n  //1. Location\n  //2. Array with animals in this location\n  //If the location already exists, includes animal directly in the animals array.\n  //Then reduce matix to get the final object\n    const entries = data.animals.reduce((arr, animal) => {\n      if(arr.some(item => item[0] === animal.location)) {\n        arr.forEach(item => {\n          if(item[0] === animal.location){\n            item[1].push(animal.name);\n          }\n        })\n      } else {\n        arr.push([animal.location, [animal.name]]);\n      }\n      \n      return arr;\n    },[]);\n    return entries.reduce((obj, val) =>{\n      obj[val[0]] = val[1];\n      return obj;\n    },{});\n\n  } else if (options.includeNames) {\n\n    //includeNames: true\n    const entries = data.animals.reduce((arr, animal) => {\n      //Object with resident's names:\n      let obj = {};\n        obj[animal.name] = animal.residents.map(item => item.name);\n      if(arr.some(item => item[0] === animal.location)) {\n        arr.forEach(item => {\n          if(item[0] === animal.location){\n            item[1].push(obj);\n          }\n        })\n      } else {\n        arr.push([animal.location, [obj]]);\n       }\n      \n      return arr;\n    },[]);\n    return entries.reduce((obj, val) =>{\n      obj[val[0]] = val[1];\n      return obj;\n    },{});\n\n  }\n}"]}