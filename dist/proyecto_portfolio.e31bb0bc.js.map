{"version":3,"sources":["index.js"],"names":["name","console","log","animalMap","options","entries","data","animals","reduce","arr","animal","some","item","location","forEach","push","obj","val","includeNames","residents","map"],"mappings":"AACA,IAAMA,IAAI,GAAG,OAAb;AACAC,OAAO,CAACC,GAAR,iBAAqBF,IAArB;;AAEA,SAASG,SAAT,CAAmBC,OAAnB,EAA4B;AAC1B;AACA,MAAI,CAACA,OAAL,EAAc;AACd;AACA;AACA;AACA;AACA;AACE,QAAMC,OAAO,GAAGC,IAAI,CAACC,OAAL,CAAaC,MAAb,CAAoB,UAACC,GAAD,EAAMC,MAAN,EAAiB;AACnD,UAAGD,GAAG,CAACE,IAAJ,CAAS,UAAAC,IAAI;AAAA,eAAIA,IAAI,CAAC,CAAD,CAAJ,KAAYF,MAAM,CAACG,QAAvB;AAAA,OAAb,CAAH,EAAkD;AAChDJ,QAAAA,GAAG,CAACK,OAAJ,CAAY,UAAAF,IAAI,EAAI;AAClB,cAAGA,IAAI,CAAC,CAAD,CAAJ,KAAYF,MAAM,CAACG,QAAtB,EAA+B;AAC7BD,YAAAA,IAAI,CAAC,CAAD,CAAJ,CAAQG,IAAR,CAAaL,MAAM,CAACV,IAApB;AACD;AACF,SAJD;AAKD,OAND,MAMO;AACLS,QAAAA,GAAG,CAACM,IAAJ,CAAS,CAACL,MAAM,CAACG,QAAR,EAAkB,CAACH,MAAM,CAACV,IAAR,CAAlB,CAAT;AACD;;AAED,aAAOS,GAAP;AACD,KAZe,EAYd,EAZc,CAAhB;AAaA,WAAOJ,OAAO,CAACG,MAAR,CAAe,UAACQ,GAAD,EAAMC,GAAN,EAAa;AACjCD,MAAAA,GAAG,CAACC,GAAG,CAAC,CAAD,CAAJ,CAAH,GAAcA,GAAG,CAAC,CAAD,CAAjB;AACA,aAAOD,GAAP;AACD,KAHM,EAGL,EAHK,CAAP;AAKD,GAxBD,MAwBO,IAAIZ,OAAO,CAACc,YAAZ,EAA0B;AAE/B;AACA,QAAMb,QAAO,GAAGC,IAAI,CAACC,OAAL,CAAaC,MAAb,CAAoB,UAACC,GAAD,EAAMC,MAAN,EAAiB;AACnD;AACA,UAAIM,GAAG,GAAG,EAAV;AACEA,MAAAA,GAAG,CAACN,MAAM,CAACV,IAAR,CAAH,GAAmBU,MAAM,CAACS,SAAP,CAAiBC,GAAjB,CAAqB,UAAAR,IAAI;AAAA,eAAIA,IAAI,CAACZ,IAAT;AAAA,OAAzB,CAAnB;;AACF,UAAGS,GAAG,CAACE,IAAJ,CAAS,UAAAC,IAAI;AAAA,eAAIA,IAAI,CAAC,CAAD,CAAJ,KAAYF,MAAM,CAACG,QAAvB;AAAA,OAAb,CAAH,EAAkD;AAChDJ,QAAAA,GAAG,CAACK,OAAJ,CAAY,UAAAF,IAAI,EAAI;AAClB,cAAGA,IAAI,CAAC,CAAD,CAAJ,KAAYF,MAAM,CAACG,QAAtB,EAA+B;AAC7BD,YAAAA,IAAI,CAAC,CAAD,CAAJ,CAAQG,IAAR,CAAaC,GAAb;AACD;AACF,SAJD;AAKD,OAND,MAMO;AACLP,QAAAA,GAAG,CAACM,IAAJ,CAAS,CAACL,MAAM,CAACG,QAAR,EAAkB,CAACG,GAAD,CAAlB,CAAT;AACA;;AAEF,aAAOP,GAAP;AACD,KAfe,EAed,EAfc,CAAhB;;AAgBA,WAAOJ,QAAO,CAACG,MAAR,CAAe,UAACQ,GAAD,EAAMC,GAAN,EAAa;AACjCD,MAAAA,GAAG,CAACC,GAAG,CAAC,CAAD,CAAJ,CAAH,GAAcA,GAAG,CAAC,CAAD,CAAjB;AACA,aAAOD,GAAP;AACD,KAHM,EAGL,EAHK,CAAP;AAKD;AACF","file":"proyecto_portfolio.e31bb0bc.js","sourceRoot":"..","sourcesContent":["\nconst name = 'world';\nconsole.log(`Hello ${name}`);\n\nfunction animalMap(options) {\n  // with no parameters\n  if (!options) {\n  //Using reduce method, create a matrix with arrays of two values:\n  //1. Location\n  //2. Array with animals in this location\n  //If the location already exists, includes animal directly in the animals array.\n  //Then reduce matix to get the final object\n    const entries = data.animals.reduce((arr, animal) => {\n      if(arr.some(item => item[0] === animal.location)) {\n        arr.forEach(item => {\n          if(item[0] === animal.location){\n            item[1].push(animal.name);\n          }\n        })\n      } else {\n        arr.push([animal.location, [animal.name]]);\n      }\n      \n      return arr;\n    },[]);\n    return entries.reduce((obj, val) =>{\n      obj[val[0]] = val[1];\n      return obj;\n    },{});\n\n  } else if (options.includeNames) {\n\n    //includeNames: true\n    const entries = data.animals.reduce((arr, animal) => {\n      //Object with resident's names:\n      let obj = {};\n        obj[animal.name] = animal.residents.map(item => item.name);\n      if(arr.some(item => item[0] === animal.location)) {\n        arr.forEach(item => {\n          if(item[0] === animal.location){\n            item[1].push(obj);\n          }\n        })\n      } else {\n        arr.push([animal.location, [obj]]);\n       }\n      \n      return arr;\n    },[]);\n    return entries.reduce((obj, val) =>{\n      obj[val[0]] = val[1];\n      return obj;\n    },{});\n\n  }\n}"]}